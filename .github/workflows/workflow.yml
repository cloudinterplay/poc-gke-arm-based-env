---
name: "Global workflow"
on:
  workflow_call:
    inputs:
      working-directory:
        description: "Working directory"
        required: true
        type: string
      action:
        description: "Plan, Apply or Destroy"
        required: true
        type: string
env:
  TF_IN_AUTOMATION: yes
  TF_VAR_GITHUB_OAUTH_CLIENTID: ${{ secrets.GITHUB_OAUTH_CLIENTID }}
  TF_VAR_GITHUB_OAUTH_CLIENTSECRET: ${{ secrets.GITHUB_OAUTH_CLIENTSECRET }}
jobs:
  terraform:
    name: Terrafrom ${{ inputs.action }}
    permissions:
      id-token: 'write'
      contents: 'read'
    runs-on: 'ubuntu-latest'
    steps:
    - name: Check out code
      uses: actions/checkout@v3
    - id: 'auth'
      name: 'Authenticate to Google Cloud'
      uses: 'google-github-actions/auth@v1'
      with:
        token_format: 'access_token'
        workload_identity_provider: projects/${{ vars.project_number }}/locations/global/workloadIdentityPools/${{ vars.workload_identity_pool_id }}/providers/${{ vars.workload_identity_pool_provider_id }}
        service_account: '${{ vars.service_account }}@${{ vars.project_id }}.iam.gserviceaccount.com'
        access_token_lifetime: '300s'
    - name: Setup Terraform
      uses: hashicorp/setup-terraform@v2
      with:
        terraform_version: 1.5.5
    # Terraform plan/apply/destroy
    - name: Download artifacts
      uses: actions/download-artifact@v3
      with:
        name: terraform-artifacts
        path: structure/terraform
    - name: Terraform Init
      run: terraform init -input=false -backend-config=config.gcs.tfbackend
      working-directory: ${{ inputs.working-directory }}
    # Terraform plan
    - name: Terraform Plan
      if: inputs.action == 'plan'
      run: terraform plan -input=false -out=plan.tfplan -var="environment_dir=."
      working-directory: ${{ inputs.working-directory }}
    - name: Upload artifacts
      if: inputs.action == 'plan'
      uses: actions/upload-artifact@v3
      with:
        name: terraform-artifacts
        path: ${{ inputs.working-directory }}/plan.tfplan
        if-no-files-found: error
        retention-days: 2
    # Terraform apply
    - name: Terraform Apply
      if: inputs.action == 'apply'
      run: terraform apply -auto-approve -input=false plan.tfplan
      working-directory: ${{ inputs.working-directory }}
    # Terraform destroy
    - name: Terraform Destroy
      if: inputs.action == 'destroy'
      run: terraform destroy -auto-approve -input=false -var="environment_dir=."
      working-directory: ${{ inputs.working-directory }}
